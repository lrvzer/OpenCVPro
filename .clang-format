---
Language: Cpp
# BasedOnStyle:  LLVM
# 访问说明符(public、private、protected)的偏移
AccessModifierOffset: -4
# 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)
AlignAfterOpenBracket: Align
# 非None值，对结构数组使用初始化时会将字段按列对齐；Left Right
AlignArrayOfStructures: Right
# 连续赋值时，对齐所有等号
AlignConsecutiveAssignments:
  Enabled: false
  # 是否跨空行对齐
  AcrossEmptyLines: false
  # 是否跨评论对齐
  AcrossComments: false
  # 复合赋值是否与=对齐
  AlignCompound: false
  # 短赋值运算符是否向左填充到与长赋值运算符相同的长度
  PadOperators: true
# 对齐位域
AlignConsecutiveBitFields:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
  AlignCompound: false
  PadOperators: false
# 连续声明时，对齐所有声明的变量名
AlignConsecutiveDeclarations:
  Enabled: false
  AcrossEmptyLines: false
  AcrossComments: false
  AlignCompound: false
  PadOperators: false
# 连续定义宏时，对齐所有等号
AlignConsecutiveMacros:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
  AlignCompound: false
  PadOperators: false
# 对齐连续短大小写标签的样式。仅当AllowShortCaseLabelsOnASingleLine=true时才适用。
AlignConsecutiveShortCaseStatements:
  Enabled: false
  AcrossEmptyLines: false
  AcrossComments: false
  AlignCaseColons: false
# 用于在转义换行符中对齐反斜杠的选项
AlignEscapedNewlines: Left
# 水平对齐二元和三元表达式的操作数
AlignOperands: true
# 对齐连续的尾随的注释
AlignTrailingComments:
  Kind: Always
  # 允许对齐的空行数
  OverEmptyLines: 0
# 函数调用或大括号初始化列表不适合一行，则允许将所有参数放入下一行
AllowAllArgumentsOnNextLine: true
# 函数声明放不下一行，则允许将函数声明的所有参数放在下一行
AllowAllParametersOfDeclarationOnNextLine: true
# 允许短的块放在同一行
AllowShortBlocksOnASingleLine: Always
# 允许短的case标签放在同一行
AllowShortCaseLabelsOnASingleLine: true
# 允许在单行上使用短枚举。
AllowShortEnumsOnASingleLine: true
# 允许短的函数放在同一行
AllowShortFunctionsOnASingleLine: All
AllowShortLambdasOnASingleLine: All
# 允许短的if语句保持在同一行
AllowShortIfStatementsOnASingleLine: true
# 允许短的循环保持在同一行
AllowShortLoopsOnASingleLine: true
# 总是在定义返回类型后换行(deprecated)
AlwaysBreakAfterDefinitionReturnType: None
# 总是在返回类型后换行
AlwaysBreakAfterReturnType: None
# 总是在多行string字面量前换行
AlwaysBreakBeforeMultilineStrings: false
# 总是在template声明后换行
AlwaysBreakTemplateDeclarations: MultiLine
AttributeMacros:
  - __capability
# false表示函数实参要么都在同一行，要么都各自一行
BinPackArguments: true
# false表示所有形参要么都在同一行，要么都各自一行
BinPackParameters: true
# 位域":"前后both加空格
BitFieldColonSpacing: Both
# 也可以使用Allman
BreakBeforeBraces: Allman
# 大括号换行，只有当BreakBeforeBraces=Custom时才有效
BraceWrapping:
  # case标签后
  AfterCaseLabel: false
  # class定义后
  AfterClass: true
  # 控制语句后
  AfterControlStatement: false
  # enum定义后
  AfterEnum: false
  # extern "C" 后
  AfterExternBlock: true
  # 函数定义后
  AfterFunction: true
  # 命名空间定义后
  AfterNamespace: true
  # ObjC定义后
  AfterObjCDeclaration: false
  # struct定义后
  AfterStruct: false
  # union定义后
  AfterUnion: true
  # catch之前
  BeforeCatch: true
  # else之前
  BeforeElse: true
  # Lambda表达式体之前
  BeforeLambdaBody: false
  # while之前 do {} while(1)
  BeforeWhile: false
  # 缩进大括号
  IndentBraces: false
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true
# Break after a group of C++11 attributes before variable or function
BreakAfterAttributes: Never
# 在Java文件中每个注解后换行
BreakAfterJavaFieldAnnotations: true
# Json array
BreakArrays: true
# 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)
BreakBeforeBinaryOperators: None
# 概念声明前
BreakBeforeConceptDeclarations: Always
# BreakBeforeBraces: Attach
BreakBeforeInlineASMColon: OnlyMultiline
# 在三元运算符前换行
BreakBeforeTernaryOperators: true
# 在构造函数的初始化列表的逗号前换行
BreakConstructorInitializers: BeforeColon
# 继承列表
BreakInheritanceList: BeforeColon
# 允许在格式化时破坏字符串文字
BreakStringLiterals: true
# 每行字符的限制，0表示没有限制
ColumnLimit: 0
# 描述具有特殊含义的注释的正则表达式，不应将其拆分为行或以其他方式更改。
CommentPragmas: "^ IWYU pragma:"
# 紧凑的命名空间
CompactNamespaces: false
# 构造函数的初始化列表的缩进宽度
ConstructorInitializerIndentWidth: 4
# 行延续的缩进宽度
ContinuationIndentWidth: 4
# 去除C++11的列表初始化的大括号"{"后和"}"前的空格
Cpp11BracedListStyle: false
# 继承最常用的指针和引用的对齐方式
DerivePointerAlignment: false
# 关闭格式化
DisableFormat: false
# 修饰符后面是否加空行
EmptyLineAfterAccessModifier: Never
# 修饰符前面是否加空行
EmptyLineBeforeAccessModifier: LogicalBlock
ExperimentalAutoDetectBinPacking: false
# 为命名空间添加缺少的命名空间结束注释，并修复无效的现有注释
FixNamespaceComments: true
# 需要被解读为foreach循环而不是函数调用的宏
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH
IfMacros:
  - KJ_IF_MAYBE
# 对#include进行排序
IncludeBlocks: Preserve
IncludeCategories:
  - Regex: '^"(llvm|llvm-c|clang|clang-c)/'
    Priority: 2
    SortPriority: 0
    CaseSensitive: false
  - Regex: '^(<|"(gtest|gmock|isl|json)/)'
    Priority: 3
    SortPriority: 0
    CaseSensitive: false
  - Regex: ".*"
    Priority: 1
    SortPriority: 0
    CaseSensitive: false
IncludeIsMainRegex: "(Test)?$"
IncludeIsMainSourceRegex: ""
# 缩进修饰符标签
IndentAccessModifiers: false
# 缩进case代码块
IndentCaseBlocks: false
# 缩进case标签
IndentCaseLabels: false
# 缩进extern代码块 Indent  AfterExternBlock
IndentExternBlock: Indent
# 缩进Goto标签
IndentGotoLabels: true
# 缩进预处理器指令 [None | AfterHash | BeforeHash]
IndentPPDirectives: BeforeHash
# 缩进模板中的requires子句
IndentRequiresClause: false
# 缩进宽度
IndentWidth: 4
# 函数返回类型换行时，缩进函数声明或函数定义的函数名
IndentWrappedFunctionNames: false
# 在C++中的控制语句（if、else、for、do 和 while）之后插入大括号，除非控制语句位于宏定义内或者大括号将包围预处理器指令。
InsertBraces: false
InsertNewlineAtEOF: false
InsertTrailingCommas: None
IntegerLiteralSeparator:
  Binary: 0
  BinaryMinDigits: 0
  Decimal: 0
  DecimalMinDigits: 0
  Hex: 0
  HexMinDigits: 0
JavaScriptQuotes: Leave
JavaScriptWrapImports: true
# 保留在块开始处的空行
KeepEmptyLinesAtTheStartOfBlocks: true
KeepEmptyLinesAtEOF: false
# lambda 体的缩进样式
LambdaBodyIndentation: Signature
LineEnding: DeriveLF
# 开始一个块的宏的正则表达式
MacroBlockBegin: ""
# 结束一个块的宏的正则表达式
MacroBlockEnd: ""
# 连续空行的最大数量
MaxEmptyLinesToKeep: 1
# 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All
NamespaceIndentation: All
# 当Objective-C协议一致性列表项超过ColumnLimit时，控制将它们装箱到尽可能少的行中。
ObjCBinPackProtocolList: Auto
# 使用ObjC块时缩进宽度
ObjCBlockIndentWidth: 4
# 当函数调用中存在嵌套块参数时，将参数列表分成行
ObjCBreakBeforeNestedBlockParam: true
# 在ObjC的@property后添加一个空格
ObjCSpaceAfterProperty: false
# 在ObjC的protocol列表前添加一个空格
ObjCSpaceBeforeProtocolList: true
PackConstructorInitializers: BinPack
PenaltyBreakAssignment: 2
# 在call后对函数调用换行的penalty
PenaltyBreakBeforeFirstCallParameter: 19
# 在一个注释中引入换行的penalty
PenaltyBreakComment: 300
# 第一次在<<前换行的penalty
PenaltyBreakFirstLessLess: 120
PenaltyBreakOpenParenthesis: 0
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
# 对于每个在行字符数限制之外的字符的penalty
PenaltyExcessCharacter: 1000000
PenaltyIndentedWhitespace: 0
# 将函数的返回类型放到它自己的行的penalty
PenaltyReturnTypeOnItsOwnLine: 60
# 指针和引用的对齐: Left, Right, Middle
PointerAlignment: Left
# 用于预处理器语句缩进的列数，默认置-1，会依据IndentWidth的大小缩进
PPIndentWidth: -1
# 排列说明符和限定符的不同方式
QualifierAlignment: Leave
# 赋值Pointer，意味着对齐方式同PointerAlignment
ReferenceAlignment: Pointer
# 允许重新排版注释
ReflowComments: true
# 根据LLVM编码风格，删除C++中控制语句的可选大括号（if、else、for和while）
RemoveBracesLLVM: false
# 删除多余的括号
RemoveParentheses: Leave
# 删除非空函数右大括号后面的分号
RemoveSemicolon: false
# require子句的位置
RequiresClausePosition: OwnLine
# 用于的缩进需要表达式主体
RequiresExpressionIndentation: OuterScope
# 指定使用空行来分隔定义块，包括类、结构、枚举和函数。Leave、Always(新增一行)、Never(没有空行)
SeparateDefinitionBlocks: Always
# 为0时，会配合FixNamespaceComments，对没有注释的命名空间追加注释
ShortNamespaceLines: 0
# 允许排序#include
SortIncludes: CaseSensitive
# Java导包时，静态导入将放置在非静态导入之后
SortJavaStaticImport: After
# using声明排序
SortUsingDeclarations: LexicographicNumeric
# 在C风格类型转换后添加空格
SpaceAfterCStyleCast: false
# 是否在逻辑非运算符(!)后插入一个空格
SpaceAfterLogicalNot: false
# 是否在template关键字后面插入一个空格
SpaceAfterTemplateKeyword: true
# 定义在什么情况下在指针限定符之前或之后放置空格，Default=Left
SpaceAroundPointerQualifiers: Default
# 在赋值运算符之前添加空格
SpaceBeforeAssignmentOperators: true
# 在case分支中，冒号前的空格是否保留
SpaceBeforeCaseColon: false
# 是否用于初始化对象的C++11大括号列表之前插入一个空格
SpaceBeforeCpp11BracedList: false
# 构造函数初始化冒号之前的空格是否保留
SpaceBeforeCtorInitializerColon: true
# 继承冒号之前的空格是否保留
SpaceBeforeInheritanceColon: true
# JSON冒号之前的空格是否添加
SpaceBeforeJsonColon: false
# 开圆括号之前添加一个空格: Never, ControlStatements, Always,Custom
SpaceBeforeParens: ControlStatements
# SpaceBeforeParens: Custom时有用
SpaceBeforeParensOptions:
  # 控制语句关键字(for/if/while...)和左括号之间是否添加空格
  AfterControlStatements: true
  # foreach宏和左括号之间是否添加空格
  AfterForeachMacros: true
  # 函数声明名称和左括号之间是否添加空格
  AfterFunctionDefinitionName: false
  # 函数定义名称和左括号之间是否添加空格
  AfterFunctionDeclarationName: false
  # if宏和左括号之间是否添加空格
  AfterIfMacros: true
  # 运算符重载和左括号之间是否添加空格
  AfterOverloadedOperator: false
  # requires子句中的requires关键字和左括号（如果有）之间是否添加空格
  AfterRequiresInClause: false
  # requires表达式中的requires关键字和左括号之间是否添加空格
  AfterRequiresInExpression: false
  # 仅当括号不为空时，在左括号前是否添加一个空格
  BeforeNonEmptyParentheses: false
# 基于范围的for循环冒号之前的空格是否保留
SpaceBeforeRangeBasedForLoopColon: true
# 如果为true，空格将在"["之前，不适用于Lambda表达式
SpaceBeforeSquareBrackets: false
# 在{}括号中添加空格
SpaceInEmptyBlock: false
# 在尾随的评论前添加的空格数(只适用于//)
SpacesBeforeTrailingComments: 1
# 在尖括号的<后和>前添加空格
SpacesInAngles: Never
# 空格将插入到容器文字内
SpacesInContainerLiterals: true
# 行注释开头允许有多少个空格
SpacesInLineCommentPrefix:
  Minimum: 1
  # -1禁用
  Maximum: -1
# 括号内的空格
SpacesInParens: Never
# SpacesInParens为Custom时SpacesInParensOptions有效
SpacesInParensOptions:
  InCStyleCasts: false
  InConditionalStatements: false
  InEmptyParentheses: false
  Other: false
# 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响
SpacesInSquareBrackets: false
# C++标准，Latest=c++11, [c++03, c++11, c++14, c++17, c++20, Latest, Auto]
Standard: Latest
# 不被解析为标识符列表
StatementAttributeLikeMacros:
  - Q_EMIT
# 应被解释为完整语句的宏向量
StatementMacros:
  - Q_UNUSED
  - QT_REQUIRE_VERSION
# tab宽度
TabWidth: 4
UseTab: Never
VerilogBreakBetweenInstancePorts: true
WhitespaceSensitiveMacros:
  - BOOST_PP_STRINGIZE
  - CF_SWIFT_NAME
  - NS_SWIFT_NAME
  - PP_STRINGIZE
  - STRINGIZE
---

